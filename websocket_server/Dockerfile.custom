# Example Dockerfile for building websocket_server with custom handlers
# Users can use this as a template to add their own custom handlers

# Use the golang builder image to compile custom handlers
FROM golang:1.24-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git gcc musl-dev sqlite-dev

# Set working directory
WORKDIR /build

# Copy the websocket_server source code
# Option 1: Clone from repository (uncomment if using this approach)
# RUN git clone https://github.com/IonesioJunior/Synaptic.git /build && \
#     cd /build/websocket_server

# Option 2: Copy from local directory (if you have the source locally)
COPY websocket_server/go.mod websocket_server/go.sum ./
RUN go mod download

# Copy the websocket_server source
COPY websocket_server/ ./

# Copy YOUR custom handlers into the customhandlers directory
# Replace this with the path to your custom handlers
COPY my-custom-handlers/*.go ./customhandlers/

# Build the binary with your custom handlers included
RUN CGO_ENABLED=1 GOOS=linux go build -a -installsuffix cgo -o websocket-server .

# Generate self-signed certificates (or copy your own)
RUN apk add --no-cache openssl && \
    openssl req -x509 -newkey rsa:4096 -keyout server.key -out server.crt \
    -days 365 -nodes -subj "/CN=localhost" \
    -addext "subjectAltName = DNS:localhost,DNS:ws-server,DNS:websocket-server,IP:127.0.0.1,IP:::1"

# Final stage - minimal runtime image
FROM alpine:latest

# Install runtime dependencies
RUN apk --no-cache add ca-certificates sqlite

# Create non-root user
RUN addgroup -g 1000 -S wsserver && \
    adduser -u 1000 -S wsserver -G wsserver

# Set working directory
WORKDIR /app

# Copy binary and certificates from builder
COPY --from=builder /build/websocket-server .
COPY --from=builder /build/server.crt .
COPY --from=builder /build/server.key .

# Copy static files if they exist
COPY --from=builder /build/static ./static

# Create directory for database
RUN mkdir -p /app/data && \
    chown -R wsserver:wsserver /app

# Switch to non-root user
USER wsserver

# Environment variables with defaults
ENV SERVER_ADDR=":443" \
    MESSAGE_RATE_LIMIT="5.0" \
    MESSAGE_BURST_LIMIT="10" \
    JWT_SECRET=""

# Expose ports
EXPOSE 80 443

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider --no-check-certificate https://localhost/health || exit 1

# Volume for persistent data
VOLUME ["/app/data"]

# Run the server with your custom handlers
CMD ["./websocket-server"]