name: Security

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run security scans weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

permissions:
  actions: read
  contents: read
  security-events: write
  pull-requests: write

env:
  GO_VERSION: '1.22'

jobs:
  # =============================================================================
  # Go Vulnerability Scanning
  # =============================================================================
  govulncheck:
    name: Go Vulnerability Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-security-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-security-
          ${{ runner.os }}-go-
          
    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest
      
    - name: Run govulncheck (websocket_server)
      working-directory: ./websocket_server
      run: |
        echo "::group::WebSocket Server Vulnerability Scan"
        govulncheck -json ./... > ../govulncheck-websocket.json 2>&1 || true
        govulncheck ./...
        echo "::endgroup::"
        
    - name: Run govulncheck (client-sdk)
      working-directory: ./client-sdk
      run: |
        echo "::group::Client SDK Vulnerability Scan"
        govulncheck -json ./... > ../govulncheck-client.json 2>&1 || true
        govulncheck ./...
        echo "::endgroup::"
        
    - name: Upload vulnerability results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: govulncheck-results
        path: |
          govulncheck-*.json
        retention-days: 30

  # =============================================================================
  # Dependency Review (Pull Requests Only)
  # =============================================================================
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-dependencies-licenses: |
          MIT
          Apache-2.0
          BSD-2-Clause
          BSD-3-Clause
          ISC
          CC0-1.0
        deny-licenses: |
          GPL-2.0
          GPL-3.0
          AGPL-1.0
          AGPL-3.0
          CPAL-1.0
          CPOL-1.02
          EPL-1.0
          EPL-2.0
          EUPL-1.1
          EUPL-1.2
          LGPL-2.0
          LGPL-2.1
          LGPL-3.0
          NPL-1.0
          NPL-1.1
          OSL-3.0
          QPL-1.0
          Sleepycat

  # =============================================================================
  # CodeQL Static Analysis
  # =============================================================================
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'go' ]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: +security-and-quality
        
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-codeql-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-codeql-
          ${{ runner.os }}-go-
          
    - name: Build projects
      run: |
        echo "::group::Building WebSocket Server"
        cd websocket_server && go build -v ./...
        echo "::endgroup::"
        
        echo "::group::Building Client SDK"
        cd ../client-sdk && go build -v ./...
        echo "::endgroup::"
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  # =============================================================================
  # Trivy Security Scanner
  # =============================================================================
  trivy:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner (filesystem)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '0'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Trivy vulnerability scanner (table format)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '0'
        
    - name: Upload Trivy results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-results
        path: trivy-results.sarif
        retention-days: 30

  # =============================================================================
  # Secrets Detection
  # =============================================================================
  secrets-detection:
    name: Secrets Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        
    - name: Upload GitLeaks results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: gitleaks-results
        path: results.sarif
        retention-days: 30

  # =============================================================================
  # Go Modules Security Audit
  # =============================================================================
  go-mod-audit:
    name: Go Modules Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-audit-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-audit-
          ${{ runner.os }}-go-
          
    - name: Install Nancy
      run: go install github.com/sonatypecommunity/nancy@latest
      
    - name: Audit dependencies (websocket_server)
      working-directory: ./websocket_server
      run: |
        echo "::group::WebSocket Server Dependency Audit"
        go list -json -deps ./... | nancy sleuth --loud || true
        echo "::endgroup::"
        
    - name: Audit dependencies (client-sdk)
      working-directory: ./client-sdk
      run: |
        echo "::group::Client SDK Dependency Audit"
        go list -json -deps ./... | nancy sleuth --loud || true
        echo "::endgroup::"
        
    - name: Check for known vulnerabilities in go.mod
      run: |
        echo "::group::Go Module Vulnerability Check"
        for dir in websocket_server client-sdk; do
          echo "Checking $dir..."
          cd $dir
          go mod why -m || true
          go mod graph | grep -E "(vulnerable|CVE)" || echo "No known vulnerabilities found in $dir"
          cd ..
        done
        echo "::endgroup::"

  # =============================================================================
  # OWASP ZAP Security Testing (API endpoints)
  # =============================================================================
  owasp-zap:
    name: OWASP ZAP Security Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Build and start server
      working-directory: ./websocket_server
      run: |
        go build -o websocket_server .
        ./websocket_server &
        SERVER_PID=$!
        echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
        sleep 5
        
    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'http://localhost:8080'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
        
    - name: Stop server
      if: always()
      run: |
        if [ ! -z "$SERVER_PID" ]; then
          kill $SERVER_PID || true
        fi

  # =============================================================================
  # Security Summary Job
  # =============================================================================
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [govulncheck, codeql, trivy, secrets-detection, go-mod-audit]
    if: always()
    
    steps:
    - name: Check Security Results
      run: |
        echo "Security Scan Results Summary:"
        echo "Go Vulnerability Check: ${{ needs.govulncheck.result }}"
        echo "CodeQL Analysis: ${{ needs.codeql.result }}"
        echo "Trivy Security Scan: ${{ needs.trivy.result }}"
        echo "Secrets Detection: ${{ needs.secrets-detection.result }}"
        echo "Go Modules Audit: ${{ needs.go-mod-audit.result }}"
        
        # Check for failures in critical security scans
        if [[ "${{ needs.govulncheck.result }}" == "failure" || \
              "${{ needs.codeql.result }}" == "failure" || \
              "${{ needs.secrets-detection.result }}" == "failure" ]]; then
          echo "::error::Critical security scan failures detected"
          exit 1
        fi
        
        # Warnings for non-critical failures
        if [[ "${{ needs.trivy.result }}" == "failure" || \
              "${{ needs.go-mod-audit.result }}" == "failure" ]]; then
          echo "::warning::Some security scans completed with warnings"
        fi
        
        echo "::notice::Security scan summary completed ✅"